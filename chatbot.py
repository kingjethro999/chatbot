import requests import json import os from typing import List, Dict import logging from datetime import datetime class CloudLLaMAChatbot:     def __init__(self, api_token: str):         """         Initialize the cloud-based LLaMA chatbot using Hugging Face's API.                 Args:             api_token: Hugging Face API token         """         self.api_url = "https://api-inference.huggingface.co/models/meta-llama/Llama-2-7b-chat-hf"         self.headers = {"Authorization": f"Bearer {api_token}"}         self.conversation_history: List[Dict] = []                 # Initialize logging         logging.basicConfig(level=logging.INFO)         self.logger = logging.getLogger(__name__)     def add_message(self, role: str, content: str) -> None:         """Add a message to the conversation history."""         self.conversation_history.append({             "role": role,             "content": content,             "timestamp": datetime.now().isoformat()         })     def format_prompt(self) -> str:         """Format the conversation history into a prompt."""         formatted_prompt = "You are a helpful AI assistant. Please respond concisely and clearly.\n\n"                 for message in self.conversation_history:             if message["role"] == "user":                 formatted_prompt += f"Human: {message['content']}\n"             else:                 formatted_prompt += f"Assistant: {message['content']}\n"                 return formatted_prompt + "Assistant:"     def generate_response(self, user_input: str) -> str:         """         Generate a response using the cloud API.                 Args:             user_input: The user's message                     Returns:             str: The model's response         """         self.add_message("user", user_input)                 try:             # Prepare the API request             payload = {                 "inputs": self.format_prompt(),                 "parameters": {                     "max_length": 2000,                     "temperature": 0.7,                     "top_p": 0.95,                     "return_full_text": False                 }             }                         # Make the API request             response = requests.post(                 self.api_url,                 headers=self.headers,                 json=payload             )                         if response.status_code != 200:                 raise Exception(f"API request failed with status code: {response.status_code}")                         # Extract the generated text             response_data = response.json()             if isinstance(response_data, list) and len(response_data) > 0:                 generated_text = response_data[0].get('generated_text', '').strip()             else:                 generated_text = "I apologize, but I couldn't generate a proper response."                         self.add_message("assistant", generated_text)             return generated_text                     except Exception as e:             self.logger.error(f"Error generating response: {str(e)}")             return "I apologize, but I encountered an error generating a response."     def save_conversation(self, filename: str) -> None:         """Save the conversation history to a file."""         try:             with open(filename, 'w') as f:                 json.dump(self.conversation_history, f, indent=2)             self.logger.info(f"Conversation saved to {filename}")         except Exception as e:             self.logger.error(f"Failed to save conversation: {str(e)}") def main():     # Check for API token     api_token = os.getenv("HUGGINGFACE_API_TOKEN")     if not api_token:         print("Please set your Hugging Face API token first!")         print("Get it from: https://huggingface.co/settings/tokens")         print("Then set it as an environment variable:")         print("export HUGGINGFACE_API_TOKEN='your_token_here'")         return     chatbot = CloudLLaMAChatbot(api_token)     print("Cloud Chatbot initialized. Type 'quit' to exit or 'save' to save the conversation.")         while True:         user_input = input("\nYou: ").strip()                 if user_input.lower() == 'quit':             break         elif user_input.lower() == 'save':             filename = input("Enter filename to save conversation: ")             chatbot.save_conversation(filename)             continue                 response = chatbot.generate_response(user_input)         print(f"\nAssistant: {response}") if __name__ == "__main__":     main()